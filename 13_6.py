# Задача 1. Сумма чисел
# Что нужно сделать
# Напишите функцию summa_n, которая принимает одно целое положительное число N и выводит сумму всех
# чисел от 1 до N включительно.

def sumNum(number):
    sum_number = 0
    for num in range(1, number + 1):
        sum_number += num
    print(f'Сумма всех чисел числа {number} равна {sum_number}')

number = int(input('Введите число: '))
sumNum(number)

# Задача 2. Функция в функции
# Что нужно сделать
# Евгений проходит специальный тест по программированию. У него всё шло хорошо, пока он не наткнулся на тему
# «Функции». Задание звучит так.
# Основная ветка программы, не считая заголовков функций, состоит из одной строки кода. Это вызов функции test().
# В ней запрашивается на ввод целое число. Если оно положительное, то вызывается функция positive(),
# тело которой содержит команду вывода на экран слова «Положительное». Если число отрицательное, то
# вызывается функция negative(), её тело содержит выражение вывода на экран слова «Отрицательное».
# Помогите Евгению и реализуйте такую программу.

def positive():
    print('Положительное')

def negative():
    print('Отрицательное')

def test():
    number = int(input('Введите число: '))
    if number >= 0:
        positive()
    else:
        negative()

# Задача 3. Апгрейд калькулятора
# Что нужно сделать
# Степан, как и большая часть населения планеты, для расчёта суммы и разности чисел использует калькулятор.
# Однако в работе ему нужно совершать не только обычные действия вроде сложения и вычитания, а делать что-то
# вручную он уже устал. Поэтому Степан решил немного расширить функционал своего калькулятора.
#
# Напишите программу, запрашивающую у пользователя число и действие, которое нужно с ним сделать: вывести сумму
# его цифр, максимальную или минимальную цифру. Каждое действие оформите в виде отдельной функции, а основную
# программу зациклите.

def sumNumber(number):
    sum_number = 0
    while number > 0:
        sum_number += number % 10
        number //= 10
    print(f'Сумма цифр: {sum_number}')

def maxNumber(number):
    max_number = 0
    while number > 0:
        if max_number < number % 10:
            max_number = number % 10
        number //= 10
    print(f'Максимальная цифра {max_number}')

def minNumber(number):
    min_number = 10
    while number > 0:
        if min_number > number % 10:
            min_number = number % 10
        number //= 10
    print(f'Максимальная цифра {min_number}')

number = int(input('Введите число: '))
print('1 - Вывести сумму цифр')
print('2 - Максимальную цифру')
print('3 - Минимальную цифру')
answer = int(input('Какое действие выполнить: '))

if answer == 1:
    sumNumber(number)
elif answer == 2:
    maxNumber(number)
elif answer == 3:
    minNumber(number)
else:
    print('Введено некорректное значение.')

# Задача 4. Число наоборот
# Что нужно сделать
# Вводится последовательность чисел, которая оканчивается нулём. Реализуйте функцию, которая принимает в качестве
# аргумента каждое число, переворачивает его и выводит на экран.

def reverseNumber(number):
    reverse_number = ''
    while number > 0:
        reverse_number += number % 10
        number //= 10
    print(f'Обратное число: {reverse_number}')

number = int(input('Введите число: '))
reverseNumber(number)

# Задача 5. Текстовый редактор
# Что нужно сделать
# Мы продолжаем разрабатывать новый текстовый редактор, и в этот раз нам поручили написать для него код,
# который считает количество любой буквы и любой цифры в тексте (а не только буквы Ы, как раньше).

# Напишите функцию count_letters, которая принимает на вход текст и подсчитывает, какое в нём количество цифр K и
# букв N. Функция должна вывести на экран информацию о найденных буквах и цифрах в определённом формате.

def count_letters(text, figure, letter):
    count_figure = 0
    count_letter = 0
    for sign in text:
        if sign == figure:
            count_figure += 1
        elif sign == letter:
            count_letter += 1
    print(f'Количество цифр {figure}: {count_figure}')
    print(f'Количество букв {letter}: {count_letter}')

text = input('Введите текст: ')
figure = input('Какую цифру ищем? ')
letter = input('Какую букву ищем? ')
count_letters(text, figure, letter)

# Задача 6. Монетка
# Что нужно сделать
# Практиканту дали задание найти старую металлическую монетку по заданным координатам. Металлоискатель сканирует
# местность вокруг пользователя, и при обнаружении/отсутствии металла прибор отображает на экране соответствующее
# сообщение.
# Даны два действительных числа x и y. Напишите функцию, которая проверяет, принадлежит ли точка с координатами (x, y)
# заштрихованному квадрату (включая его границу). Если точка принадлежит квадрату, выведите сообщение
# «Монетка где-то рядом», в противном случае выведите сообщение «Монетки в области нет». На рисунке сетка
# проведена с шагом 1.
import math

def coinDetected(x, y):
    if math.fabs(x) <= 1 and math.fabs(y) <= 1:
        print('Монетка где-то рядом')
    else:
        print('Монетки в области нет')

x = float(input('Введите икс: '))
y = float(input('Введите игрек: '))
coinDetected(x, y)

# Задача 7. Опять?
# Что нужно сделать
# Вы снова встретились со своим старым другом, который был безмерно благодарен вам за то, что вы помогли ему сдать
# задачу тому преподавателю. Вот только друг всё равно выглядел довольно грустным. Когда вы спросили, в чём дело,
# друг взорвался эмоциями и рассказал, что теперь препод попросил написать функцию нахождения минимального числа
# без использования условного оператора и циклов. Конечно же, вы решили снова помочь бедняге. Напишите для него
# такую программу.

import math

def findMin(a, b):
     minNumber = (a + b - math.fabs(a - b)) / 2
     print(f'Минимальное число: {minNumber}')

a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
findMin(a, b)

# Задача 8. НОД
# Что нужно сделать
# Напишите функцию, вычисляющую наибольший общий делитель двух чисел.

def NOD(a, b):
    NOD = 1
    number = 2
    while a > 1 or b > 1:
        if a % number == 0 and b % number == 0:
            NOD *= number
            a /= number
            b /= number
        elif a % number == 0:
            a /= number
            number += 1
        elif b % number == 0:
            b /= number
            number += 1
        else:
            number += 1
    print(f'НОД : {NOD}')


a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
NOD(a, b)

# Задача 9. Недоделка
# Что нужно сделать
#
# Вы пришли на работу в контору по разработке игр, целевая аудитория — дети и их родители. У прошлого программиста
# было задание сделать две игры в одном приложении, чтобы пользователь мог выбирать одну из них. Однако программист,
# на место которого вы пришли, перед увольнением не успел сделать эту задачу и оставил только небольшой шаблон проекта.
# Используя этот шаблон, реализуйте игры «Камень, ножницы, бумага» и «Угадай число».
#
# Правила игры «Камень, ножницы, бумага»: программа запрашивает у пользователя строку и выводит, победил он или
# проиграл. Камень бьёт ножницы, ножницы режут бумагу, бумага кроет камень.
#
# Правила игры «Угадай число»: программа запрашивает у пользователя число до тех пор, пока он его не отгадает.

def rock_paper_scissors():
    variant = input('Введите камень, ножницы или бумагу: ')
    if variant == 'бумага':
        print('Вы выйграли')
    elif variant == 'ножницы':
        print('Вы проиграли')
    elif variant == 'камень':
        print('Ничья')


def guess_the_number():
    number = int(input('Введите число: '))
    while number != 33:
        number = int(input('Введите число: '))
        print('Число не верное, попробуйте еще раз')
    print('Число введено верно')


def mainMenu():
    print('1- Камень, ножницы, бумага')
    print('2- Угадай число')
    game = int(input('Выберите игру: '))
    if game == 1:
        rock_paper_scissors()
    elif game == 2:
        guess_the_number()
    else:
        print('Введено некорректное значение.')
    print()
    mainMenu()


mainMenu()



