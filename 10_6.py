# Задача 1. Я стал новым пиратом!
# Что нужно сделать
# Старому капитану необходимо пополнить команду, но попадут на его корабль только достойные! Он отобрал 10
# человек и только те, кто крикнет слово «Карамба», попадут на борт.
#
# Пользователь вводит 10 слов. Напишите программу, которая определяет, сколько из них совпадают со словом «Карамба».
from traceback import print_tb

countCaramba = 0

for _ in range(10):
    word = input('Введите слово: ')
    if word == 'Карамба':
        countCaramba += 1

print(f'Введено {countCaramba} раз "Карамба"')

# Задача 2. Кривой мессенджер
# Что нужно сделать
# При передаче сообщений в одном мессенджере иногда возникают неполадки и в сообщение попадает лишний символ — звёздочка.
# Пользователям это изрядно надоело, и они начали уходить в другие мессенджеры,но одному пользователю стало интересно,
# на каких позициях обычно появляется эта звёздочка.
#
# Чтобы это выяснить, пользователю необходимо подготовить строки, в которых символ «*» встречается ровно один раз.
# Напишите программу, которая определяет порядковый номер этого символа в строке.

text = input('Введите текст: ')
indexStar = 0

for index, symbol in enumerate(text):
    if symbol == '*':
        indexStar = index + 1
print(f'Символ "*" стоит на позиции {indexStar}')

# Задача 3. Театр
# Что нужно сделать
# Планируется построить театр под открытым небом, но для начала нужно оценить, сколько должно быть рядов,
# сидений в ряду и какое сделать расстояние между рядами.
#
# Напишите программу, которая получает на вход количество рядов, сидений и свободных метров между рядами,
# а затем выводит примерный макет театра на экран.

countRow = int(input('Введите кол-во рядов: '))
countSeats = int(input('Введите кол-во сидений: '))
countMeters = int(input('Введите кол-во метров между ними: '))

for _ in range(countRow):
    print('=' * countSeats, end=' ')
    print('*' * countMeters, end=' ')
    print('=' * countSeats)

# Задача 4. Марсоход 2
# Что нужно сделать
# К роботу Валли отправили ещё одного робота — Билли. Это первая высадка Билли на Марс, поэтому он тестируется в
# прямоугольном помещении размером 15 на 20 метров. Марсоход высаживается в центре комнаты (в точке 8, 10), после
# чего управление им передаётся оператору — пользователю вашей программы. Программа спрашивает, в какую сторону
# оператор хочет направить робота: север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D).
# Оператор делает выбор, марсоход перемещается на один метр в эту сторону, и программа сообщает новую позицию
# марсохода. Если марсоход упёрся в стену, он не должен пытаться перемещаться в сторону стены, в этом случае
# его позиция не меняется. Создайте программу для управления роботом Билли.

direction = input('[Программа]: Марсоход находится на позиции 8, 10, введите команду: \n [Оператор]: ')
row = 8
column = 10
colStep = 0
rowStep = 0

while True:
    if direction == 'W':
        colStep = 1
        rowStep = 0
    elif direction == 'S':
        colStep = -1
        rowStep = 0
    elif direction == 'A':
        rowStep = -1
        colStep = 0
    elif direction == 'D':
        rowStep = 1
        colStep = 0
    if (column + colStep >= 0) and (column + colStep <= 20):
        column += colStep
    if (row + rowStep >= 0) and (row + rowStep <= 15):
        row += rowStep

    direction = input(f'[Программа]: Марсоход находится на позиции {row}, {column}, введите команду: \n [Оператор]: ')



# Задача 5. Великий и могучий
# Что нужно сделать
# Паоло изучает русский язык — занимается по учебникам, читает книги, слушает музыку. Особенно Паоло понравилась
# книга «Преступление и наказание». Ему стало интересно, как найти самое длинное слово в этой книге, чтобы потом
# сравнить с его аналогом на своём языке.
#
# Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в
# тексте разделяются одним пробелом.
text = input('Введите текст: ')
longWord = ''
LongCountLetter = 0
word = ''
countLetter = 0

for letter in text:
    word = word + letter
    countLetter += 1
    if letter == ' ':
        if countLetter > LongCountLetter:
            longWord = word
            LongCountLetter = countLetter
        word = ''
        countLetter = 0

print('Самое длинное слово:', longWord)


# Задача 6. Коровы
# Что нужно сделать
# Для коров есть 10 стойл. В каждом стойле разные условия, поэтому и молока они дают по-разному. В первом стойле
# производят 2 литра в день, во втором 4, в третьем — 6, дальше — 8, 10, 12, 14, 16, 18, 20. Коровы стоят не во
# всех стойлах. Свободные и занятые обозначаются строкой из букв a и b, где a — свободное стойло, b — занятое.
#
# Напишите программу для подсчёта получаемого молока в коровнике, с учётом следующего взаимодействия пользователя с
# программой — пользователь вводит строку из 10 символов a и b. Необходимо определить, сколько в итоге будет
# произведено молока за день. __

strStoilo = input('Введите заполненность: ')
countMilk = 0

for index, letter in enumerate(strStoilo):
    if letter == 'a':
        countMilk += (index + 1) * 2

print(f'Произведено {countMilk} литров молока')

# Задача 7. Метод бутерброда
# Что нужно сделать
# Секретное агентство Super-Secret-no решило для шифрования переписки своих сотрудников использовать «метод бутерброда».
# Сначала буквы в словах нумеруются в таком порядке: первая буква получает номер 1, последняя буква — номер 2,
# вторая — номер 3, предпоследняя — номер 4, потом третья… и так для всех букв (см. рисунок). Затем все
# буквы записываются в шифр в порядке своих номеров.

# Например, слово sandwich зашифруется в shacnidw.
#
# К сожалению, программист Super-Secret-no написал только программу шифрования и уволился. Теперь агенты не могут
# понять, что они написали друг другу. Помогите им написать программу-дешифратор для расшифровки введённых сообщений.

word = input('Введите слово: ')
firstPart = ''
secondPart = ''
reverseSecondPart = ''

for index, letter in enumumerate(word):
    if index % 2 == 0:
        firstPart += letter
    else:
        secondPart += letter

for letter in secondPart:
    reverseSecondPart = letter + reverseSecondPart

for letter in reverseSecondPart:
    firstPart += letter

print(firstPart)



# Задача 8. Колонтитул
# Что нужно сделать
# Нам нужно написать программу для печати важных объявлений. Вверху объявления должен располагаться такой колонтитул:
#
# Восклицательные знаки всегда располагаются по центру строки, причём, в зависимости от важности объявления,
# количество восклицательных знаков может быть разным. Напишите программу, которая спрашивает у пользователя
# сначала общую длину колонтитула в символах, потом желаемое количество восклицательных знаков,
# после чего выводит на экран готовую строку. __

fullLong = int(input('Общая длина: '))
countAttention = int(input('Количество восклицательных знаков: '))
countOther = (fullLong - countAttention) // 2

for _ in range(fullLong):
    print('~' * countOther, end='')
    print('!' * countAttention, end='')
    print('~' * countOther)