# Задача 1. Работа с файлом
#
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три
# аргумента: вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и
# количество попыток. Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию.
# При корректном ответе функция может возвращать что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
# В основной программе вызовите функцию минимум три раза: только с вопросом, с вопросом и сообщением об ошибке,
# с вопросом и количеством попыток.

def ask_user(question,
             complaint='Неверный ввод. Пожалуйста, введите "да" или "нет".',
             retries=4):
    while True:
        answer = input(question)
        if answer == 'Да':
            return 1
        elif answer == 'Нет':
            return 0
        retries -= 1
        if retries == 0:
            print('Количество попыток истекло')
            break
        print(complaint)
        print('Осталось попыток', retries)

ask_user('Вы действительно хотите выйти? ')
ask_user('Удалить файл? ', 'Так удалить или нет?')
ask_user('Записать файл? ', retries=2)

# Задача 2. Накопление значений
#
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной
# штуки.
#
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент; второй — список lst, по
# умолчанию он пустой. В теле функции в список добавляется число num и сам список выводится на экран.
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
# add_num(5)
# add_num(10)
# add_num(15)
#
# И посмотрите, что произойдёт.
#
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно

def add_num(num, lst=None):
    lst = list()
    lst.append(num)
    print(lst)


add_num(5)
add_num(10)
add_num(15)


# Задача 3. Помощь другу
#
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора. Ему нужно подготовить
# из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных. Вот список правил,
# что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
#
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список,
# например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
#
# Всё остальное выкидываем из нашего списка.

# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:

# def create_dict(data, template=dict()):
#     if isinstance(data, dict):
#         return data
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#         return template[data] = data
#
# def data_preparation(old_list):
#     new_list = []
#     for i_element in old_list:
#         new_list.append(create_dict(i_element))
#     return new_list
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
# data = data_preparation(data)
# print(data)
# Исправьте программу и убедитесь, что всё работает верно.

def create_dict(data):
    if isinstance(data, dict):
        return data
    if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
        return {data: data}

def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_dict = create_dict(i_element)
        if new_dict:
            new_list.append(new_dict)
    return new_list

data = ['sad', {'sds': 23}, {43}, [12, 42, 1], 2323]
data = data_preparation(data)
print(data)