# Задача 1. Задачи компаний
# Одна IT-компания решила расшириться и взяла под своё крыло ещё три таких же, но поменьше. Конечно же,
# все выполненные и невыполненные задачи этих компаний перетекли в основную компанию.
# Даны четыре списка компаний, в которых для каждой задачи написано, выполнена (1) она или нет (0):
# main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
# first_company = [0, 0, 0]
# second_company = [1, 0, 0, 1, 1]
# third_company = [1, 1, 1, 0, 1]
#
# Напишите программу, которая расширяет список main элементами остальных списков, выведите итоговый список,
# а также выведите количество невыполненных задач.
# Результат работы программы:
# Общий список задач: [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]
# Кол-во невыполненных задач: 10

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print(f'Общий список задач: {main}')
print(f'Кол-во невыполненных задач: {main.count(0)}')

# Задача 2. Вредоносное ПО
#
# Гера решил попрактиковаться в программировании и захотел написать небольшой скрипт, который после двух сообщений
# отправляет ещё одно на основе первых двух.
#
# Пользователь вводит две строки. В каждой из них есть какое-то количество специальных символов ! и ?. Напишите
# программу, которая считает количество этих символов отдельно в первой строке и отдельно во второй. Если в первой
# строке их больше, чем во второй, то на экран выводится первая строчка, объединённая со второй, а иначе — вторая
# с первой. При равном количестве символов в строках выводится «Ой».

def extend_and_print(list1, list2):
    list1.extend(list2)
    for letter in list1:
        print(letter, end='')

message_one = list(input('Первое сообщение: '))
message_two = list(input('Второе сообщение: '))

if len(message_one) > len(message_two):
    extend_and_print(message_one, message_two)
elif len(message_two) > len(message_one):
    extend_and_print(message_two, message_one)
else:
    print('Ой')


# Задача 3. Пакеты
#
# При работе с сервером мы кодируем сообщение и отправляем его в виде пакетов информации. Их количество равно N.
# Допустим, каждый пакет содержит четыре числа, каждое из которых равно нулю или единице. Эти числа называются
# битами. Иногда в кодировке сообщения встречаются ошибки, и в пакете эта ошибка обозначается числом -1. Если
# таких ошибок не больше одной, то этот пакет мы целиком добавляем в список для декодирования, а иначе отбрасываем.
#
# Напишите программу, которая будет обрабатывать полученные пакеты и выведет на экран итоговое сообщение для
# декодирования, а также количество ошибок в нём и количество необработанных пакетов.

count_packs = int(input('Кол-во пакетов: '))
decode = []
pack = []
bad_packs = 0

for i_p in range(count_packs):
    print(f'\nПакет номер {i_p + 1}')
    for i_b in range(4):
        bit = int(input(f'{i_b + 1} бит: '))
        pack.append(bit)
    if pack.count(-1) <= 1:
        decode.extend(pack)
    else:
        print('Много ошибок в пакете.')
        bad_packs += 1
    pack = []

print(f'Полученное сообщение: {decode}')
print(f'Кол-во ошибок в сообщении: {decode.count(-1)}')
print(f'Кол-во потерянных пакетов: {bad_packs}')




