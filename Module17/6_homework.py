# Задача 1. Страшный код
# Что нужно сделать
# Вашему другу, который тоже начал изучать Python, спикер дал следующие условия: есть три списка — основной и два
# побочных. В основном лежат элементы [1, 5, 3], а в побочных — [1, 5, 1, 5] и [1, 3, 1, 5, 3, 3] соответственно.
#
# Первый побочный закидывается в основной, в нём считается и выводится на экран количество цифр «5», а затем они
# удаляются из основного списка. После этого в основной закидывается второй побочный список, в нём считается и
# выводится на экран количество цифр «3». В конце также выводится и сам список.
#
# Из интереса вы попросили друга показать код его программы и поняли, что сделали это не зря, — то, что вы увидели,
# повергло вас в шок и ужас. Вот сам код:

a = [1, 5, 3]
b = [1, 5, 1, 5]
c = [1, 3, 1, 5, 3, 3]
a.extend(b)
count_five = a.count(5)
print(f'Кол-во цифр 5 при первом объединении: {count_five}')
for num in a:
    if num == 5:
        a.remove(num)
a.extend(c)
count_three = a.count(3)
print(f'Кол-во цифр 3 при втором объединении: {count_three}')
print(a)

# Задача 2. Шеренга
# Что нужно сделать
# Два класса стоят в две шеренги. В каждом классе ученики выстроены по росту (по возрастанию): в одном классе от
# 160 см до 176 см с шагом 2, в другом классе — от 162 см до 180 см с шагом 3. Спустя какое-то время два класса
# объединяют в одну шеренгу и выстраивают их по росту.
#
# Напишите программу, которая генерирует списки роста для каждого в классе, затем объединяет их в один список и
# сортирует в порядке возрастания. Выведите отсортированный список на экран.
#
# Формат вывода ответа:
#
# Отсортированный список учеников: [160, 162, …]

class_one = list(range(160, 177, 2))
class_two = list(range(162, 181, 3))

print(f'Первый класс: {class_one}')
print(f'Второй класс: {class_two}')

class_one.extend(class_two)

for i_h in range(len(class_one)):
    for i_h2 in range(len(class_one)):
        if class_one[i_h2] > class_one[i_h]:
            class_one[i_h], class_one[i_h2] = class_one[i_h2], class_one[i_h]

print(f'Отсортированный список учеников: {class_one}')

# Задача 3. Детали
# Что нужно сделать
# В базе данных магазина всякой всячины хранится список названий деталей и их стоимостей:
#
# shop = [['каретка', 1200],
#         ['шатун', 1000],
#         ['седло', 300],
#         ['педаль', 100],
#         ['седло', 1500],
#         ['рама', 12000],
#         ['обод', 2000],
#         ['шатун', 200],
#         ['седло', 2700]]
#
# Продавец решил, что считать количество и стоимость деталей вручную не очень удобно, поэтому решил попросить
# помощи у программиста, чтобы оптимизировать процесс.
# Напишите программу, которая запрашивает у пользователя детали, считает их количество, а также общую стоимость.
# Пример:
# Название детали: седло
# Кол-во деталей — 3
# Общая стоимость — 4500

shop = [['каретка', 1200],
        ['шатун', 1000],
        ['седло', 300],
        ['педаль', 100],
        ['седло', 1500],
        ['рама', 12000],
        ['обод', 2000],
        ['шатун', 200],
        ['седло', 2700]]

detail = input('Название детали: ')
count = int(input('Кол-во деталей - '))
price = 0

for i_d in range(len(shop)):
    if shop[i_d][0] == detail:
        price = shop[i_d][1] * count
print(f'Общая стоимость — {price}')

# Задача 4. Вечеринка
# Что нужно сделать
# В честь своего дня рождения Артём решил закатить вечеринку у себя на даче. Он не стал рассылать приглашения,
# а просто сообщил всем: «Если хотите — приходите и своих друзей тоже зовите». Люди приходили и уходили во время
# вечеринки, ночевать остались не все. К тому же и сама дача не резиновая — на ней помещается всего шесть человек.
#
# Дан изначальный список гостей — имена тех, кто пришёл к началу:
# guests = [‘Петя’, ‘Ваня’, ‘Саша’, ‘Лиза’, ‘Катя’]
#
# Напишите программу, которая спрашивает у пользователя, ушёл или пришёл гость и, исходя из ответа, добавляет
# в список или удаляет из него нужное имя. При этом гостей может быть не больше шести. Имена запрашиваются до
# тех пор, пока пользователь не введёт сообщение «Пора спать».

guests = ['Петя', 'Ваня', 'Саша', 'Лиза', 'Катя']

print(f'Сейчас на вечеринке {len(guests)} человек: {guests}')
answer = input('Гость пришёл или ушёл? ')

while answer != 'Пора спать':
    if answer == 'пришёл':
        name = input('Имя гостя: ')
        if len(guests) == 6:
            print(f'Прости, {name}, но мест нет.')
        else:
            guests.append(name)
            print(f'Привет, {name}!')
    elif answer == 'ушёл':
        name = input('Имя гостя: ')
        print(f'Пока, {name}!')
    print(f'Сейчас на вечеринке {len(guests)} человек: {guests}')
    answer = input('Гость пришёл или ушёл? ')

print('Вечеринка закончилась, все легли спать.')

# Задача 5. Песни
# Что нужно сделать
# Мы пишем приложение для удобного прослушивания музыки. У Вани есть список из девяти песен группы Depeche Mode.
# Каждая песня состоит из названия и продолжительности с точностью до долей минут:
#
# violator_songs = [
#     ['World in My Eyes', 4,86],
#     ['Sweetest Perfection', 4,43],
#     ['Personal Jesus', 4,56],
#     ['Halo', 4,9],
#     ['Waiting for the Night', 6,07],
#     ['Enjoy the Silence', 4,20],
#     ['Policy of Truth', 4,76],
#     ['Blue Dress', 4,29],
#     ['Clean', 5,83]
# ]
#
# Из этого списка Ваня хочет выбрать N песен и закинуть их в особый плейлист с другими треками. При этом ему важно,
# сколько времени в сумме эти N песен будут звучать.
#
# Напишите программу, которая запрашивает у пользователя количество песен из списка и затем названия этих песен, а
# на экран выводит общее время их звучания.

violator_songs = [
    ['World in My Eyes', 4.86],
    ['Sweetest Perfection', 4.43],
    ['Personal Jesus', 4.56],
    ['Halo', 4.9],
    ['Waiting for the Night', 6.07],
    ['Enjoy the Silence', 4.20],
    ['Policy of Truth', 4.76],
    ['Blue Dress', 4.29],
    ['Clean', 5.83]
]

count_songs = int(input('Сколько песен выбрать? '))
long_songs = 0

for i_s in range(count_songs):
    name_song = input(f'Название {i_s + 1}-й песни: ')
    for i_song in range(len(violator_songs)):
        if violator_songs[i_song][0] == name_song:
            long_songs += violator_songs[i_song][1]

print(f'Общее время звучания песен: {long_songs:.2f} минуты')

# Задача 6. Уникальные элементы
# Что нужно сделать
# Даны два списка целых чисел, оба списка заполняются с помощью клавиатуры. В первый список вводится три числа,
# во второй — семь чисел. Напишите программу, которая запрашивает у пользователя эти числа, затем расширяет первый
# список элементами второго и после этого оставляет в первом списке только уникальные элементы, то есть удаляет
# повторяющиеся числа. Условного оператора использовать нельзя.

list_one = []
list_two = []

for i_o in range(3):
    num = int(input(f'Введите {i_o + 1}-е число для первого списка: '))
    list_one.append(num)

for i_o in range(7):
    num = int(input(f'Введите {i_o + 1}-е число для второго списка: '))
    list_two.append(num)

print(f'Первый список: {list_one}')
print(f'Второй список: {list_two}')

list_one.extend(list_two)

for i_n in list_one:
    while list_one.count(i_n) > 1:
        list_one.remove(i_n)

# Задача 7. Ролики
# Что нужно сделать
# Частная контора даёт в прокат ролики разных размеров. Человек может надеть ролики только своего размера.
#
# Пользователь вводит два списка размеров: N размеров коньков и K размеров ног людей. Реализуйте код, который
# определяет наибольшее число человек, которые могут одновременно взять ролики и пойти кататься.

count_skates = int(input('Кол-во коньков: '))
list_skates = []
for i_s in range(count_skates):
    skates = int(input(f'Размер {i_s + 1}-й пары: '))
    list_skates.append(skates)

count_people = int(input('Кол-во людей: '))
list_people = []
for i_p in range(count_people):
    people = int(input(f'Размер ноги {i_p + 1}-го человека: '))
    list_people.append(people)

people_can = 0

for i_p in list_people:
    if list_skates.count(i_p) > 0:
        list_skates.remove(i_p)
        people_can += 1

# Задача 8. Считалка
# Что нужно сделать
# N человек, пронумерованных числами от 1 до N, стоят в кругу. Они начинают играть в считалку на выбывание,
# где каждый K по счёту человек выбывает из круга, после чего счёт продолжается со следующего за ним человека.
#
# На вход подаётся количество человек N и номер K. Напишите программу, которая выводит число от 1 до N — это номер
# человека, который останется в кругу последним.

count_people = int(input('Кол-во человек: '))
num_counting = int(input('Какое число в считалке? '))
print(f'Значит, выбывает каждый {num_counting}-й человек')
list_people = list(range(1, count_people + 1))
start_number = 0

while len(list_people) > 1:
    print(f'\nТекущий круг людей: {list_people}')
    print(f'Начало счёта с номера {list_people[start_number]}')
    delete_number = (start_number + num_counting - 1) % len(list_people)
    print(f'Выбывает человек под номером {list_people[delete_number]}')
    list_people.remove(list_people[delete_number])
    if delete_number == len(list_people):
        start_number = 0
    else:
        start_number = delete_number
    count_people -= 1

print(f'\nОстался человек под номером {list_people[0]}')

# Задача 9. Друзья
# Что нужно сделать
# N друзей постоянно берут в долг друг у друга деньги. В какой-то момент им надоело забывать, кто, кому и сколько
# должен, и они придумали систему долговых расписок. Чтобы начать новый год «с чистого листа», друзья решили оплатить
# все долговые расписки, которые у них накопились друг к другу. Однако выяснилось, что иногда один и тот же человек в
# разные дни выступал как в роли должника, так и в роли кредитора.
#
# Напишите программу, которая по заданным распискам вычислит, сколько всего каждый должен выплатить другим
# (или получить с других).
#
# Сначала вводится число N — количество друзей, затем вводится число K — количество долговых расписок, после
# этого следует K троек чисел: номер друга, взявшего в долг; номер друга, давшего деньги; и сумма.
# Гарантируется, что ни один друг не брал в долг сам у себя.
#
# Программа должна вывести «баланс друзей», то есть суммы, которые должны получить или отдать друзья.
# Положительное число означает, что друг должен получить деньги от других, отрицательное — должен отдать деньги.

count_friends = int(input('Кол-во друзей: '))
count_iou = int(input('Долговых расписок:'))
list_friends = [0 for _ in range(count_friends)]

for i_i in range(count_iou):
    print(f'\n{i_i + 1}-я расписка')
    to = int(input('Кому: '))
    p_from = int(input('От кого: '))
    money = int(input('Сколько: '))
    list_friends[to - 1] -= money
    list_friends[p_from - 1] += money

print('\n Баланс друзей:')
for index in range(count_friends):
    print(f'{index + 1}: {list_friends[index]}')

# Задача 10. Симметричная последовательность
# Что нужно сделать
# Последовательность чисел называется симметричной, если она одинаково читается как слева направо, так и справа
# налево. Например, следующие последовательности являются симметричными:
#
# 1 2 3 4 5 4 3 2 1
# 1 2 1 2 2 1 2 1
#
# Пользователь вводит последовательность из N чисел. Напишите программу, которая определяет, какое минимальное
# количество и каких чисел надо добавить в конец этой последовательности, чтобы она стала симметричной.

def is_polindrome(list_num):
    reverse_list = []
    for i_num in range(len(list_num) - 1, -1, -1):
        reverse_list.append(list_num[i_num])
    if reverse_list == list_num:
        return True
    else:
        return False

count_num = int(input('Кол-во чисел: '))
list_num = []
new_list = []

for _ in range(count_num):
    num = int(input('Число: '))
    list_num.append(num)

print(f'Последовательность: {list_num}')

for i_l in range(count_num):
    list_num.insert(count_num, list_num[i_l])
    new_list.insert(0, list_num[i_l])
    if is_polindrome(list_num):
        break

print(f'Нужно добавить чисел: {len(new_list)}')
print(f'Сами числа: {new_list}')